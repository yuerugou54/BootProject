# ===============================
# = MULTIPART FILE UPLOAD
# ===============================

# Set the file size limit (default 1Mb). If you want to specify that files be
# unlimited set the multipart.maxFileSize property to -1.
#max-file-size
spring.http.multipart.max-file-size = 10Mb

# Set the total request size for a multipart/form-data (default 10Mb)
#max-request-size
spring.http.multipart.max-request-size = 100Mb

# ===============================
# = DATA SOURCE
# ===============================

# Set here configurations for the database connection

# Connection url for the database "mode"
spring.datasource.url = jdbc:mysql://localhost:3306/crawler?useSSL=false&useUnicode=true\
  &characterEncoding=utf-8

# Username and password
spring.datasource.username = root
spring.datasource.password = root

# Maximum number of active connections that can be allocated from this pool at the same time.
spring.datasource.max-active = 5

# Validate the connection before borrowing it from the pool.
spring.datasource.test-on-borrow = true

# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.test-while-idle = true
spring.datasource.validation-query = SELECT 1
spring.datasource.time-between-eviction-runs-millis = 60000

# ===============================
# = JPA / HIBERNATE
# ===============================

# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager).

# Show or not repository for each sql query
spring.jpa.show-sql = false

# Hibernate ddl auto (create, create-drop, update, validate, none):
#
#  validate: validate the schema, makes no changes to the database.
#  update: update the schema accordingly to java entities found
#  create: creates the schema, destroying previous data.
#  create-drop: drop the schema at the end of the session
#
# hibernate.ddl-auto should not be used in production - set it to 'none'.
spring.jpa.hibernate.ddl-auto = update

# Allows Hibernate to generate SQL optimized for a particular DBMS
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect

# ===============================
# = GOOGLE / GUAVA CACHE
# ===============================

# This configures each cache of a maximum size of 500 and a time to live of 600 seconds. Cache
# numbers are configured in java classes, by the Cacheable("cacheName") annotations.
spring.cache.guava.spec = maximumSize=500,expireAfterAccess=600s

# ===============================
# = LOGGING
# ===============================

# A repository request of level p in a logger with level q is enabled if p >= q. This rule is at the
# heart of log4j. It assumes that levels are ordered. For the standard levels, we have
# ALL < DEBUG < INFO < WARN < ERROR < FATAL < OFF.
logging.level.org.springframework = INFO
logging.level.com.mode = INFO
logging.path="C:\\log"


# Thread Pool
thread.maxPoolSize = 10
thread.corePoolSize = 3
thread.queueCapacity = 100
thread.keepAliveSeconds = 300


#thymelea\u6A21\u677F\u914D\u7F6E
spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.suffix=.html
spring.thymeleaf.mode=HTML5
spring.thymeleaf.encoding=UTF-8
spring.thymeleaf.content-type=text/html
spring.thymeleaf.cache=false
spring.resources.chain.strategy.content.enabled=true
spring.resources.chain.strategy.content.paths=/**


spring.mvc.view.prefix=/WEB-INF/
spring.mvc.view.suffix=.jsp

#visit static resource
spring.mvc.static-path-pattern=/resources/**
spring.resources.static-locations=classpath:/static,classpath:/public,classpath:/resources,classpath:/META-INF/resources

# server port
server.port = 8080
